                FBpower = Range.clip(fbdrive + turn, -1.0, 1.0);
                RLpower = Range.clip(fbdrive - turn, -1.0, 1.0);
        
                // Tpower = Range.clip(fbdrive - turn, -1.0, 1.0);
                // Tpower = Range.clip(fbdrive - turn, -1.0, 1.0);
        
                // Send calculated power to wheels
                FLdrive.setPower();
                FRdrive.setPower();
                BLdrive.setPower();
                BRdrive.setPower();
        
        
        
        
        for (int x = 0; x < wheelSpeeds.length; x++) {
			for (double i = Math.round(wheelSpeeds[x]*10); Math.round(wheelSpeeds[x]*10) < 0; i++) {
				wheelSpeeds[x] = i/10;
				try {
					wait(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}

				telemetry.addData("Motors", "frontLeft (%.2f), frontRight (%.2f), backLeft (%.2f), backRight (%.2f)", FLdrive, FRdrive, BLdrive, BRdrive);
			}
			for (double i = Math.round(wheelSpeeds[x]*10); Math.round(wheelSpeeds[x]*10) > 0; i--) {
				wheelSpeeds[x] = i/10;
				try {
					wait(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}

				telemetry.addData("Motors", "frontLeft (%.2f), frontRight (%.2f)", FLdrive, FRdrive);
			}
		}

//		public Mat processFrame(Mat input) {
//			ArrayList<MatOfPoint> contours = new ArrayList<>();
//			Mat mIntermediateMat = new Mat();
//			Mat hierarchy = new Mat();
//			Imgproc.GaussianBlur(input,mIntermediateMat,new Size(9,9),2,2);
//			Imgproc.Canny(input, mIntermediateMat, 80, 100);
//			Imgproc.findContours(mIntermediateMat, contours, hierarchy, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE, new Point(0, 0));
//			/* Mat drawing = Mat.zeros( mIntermediateMat.size(), CvType.CV_8UC3 );
//            for( int i = 0; i< contours.size(); i++ )
//            {
//			Scalar color =new Scalar(Math.random()*255, Math.random()*255, Math.random()*255);
//            Imgproc.drawContours( drawing, contours, i, color, 2, 8, hierarchy, 0, new Point() );
//			 }*/
//			hierarchy.release();
//			// Imgproc.cvtColor(mIntermediateMat, input, Imgproc.COLOR_GRAY2RGBA, 4)
//			/* Mat drawing = Mat.zeros( mIntermediateMat.size(), CvType.CV_8UC3 );
//			 for( int i = 0; i< contours.size(); i++ )
//			 {
//			Scalar color =new Scalar(Math.random()*255, Math.random()*255, Math.random()*255);
//			 Imgproc.drawContours( drawing, contours, i, color, 2, 8, hierarchy, 0, new Point() );
//			 }*/
//			for ( int contourIdx=0; contourIdx < contours.size(); contourIdx++ )
//			{
//				// Minimum size allowed for consideration
//				MatOfPoint2f approxCurve = new MatOfPoint2f();
//				MatOfPoint2f contour2f = new MatOfPoint2f( contours.get(contourIdx).toArray() );
//				Point[] testArray = contours.get(contourIdx).toArray();
//
//				//Processing on mMOP2f1 which is in type MatOfPoint2f
//				double approxDistance = Imgproc.arcLength(contour2f, true)*0.02;
//				Imgproc.approxPolyDP(contour2f, approxCurve, approxDistance, true);
//
//				//Convert back to MatOfPoint
//				MatOfPoint points = new MatOfPoint( approxCurve.toArray() );
//
//				// Get bounding rect of contour
//				Rect rect = Imgproc.boundingRect(points);
//
//				Imgproc.rectangle(input, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height), new Scalar(255, 0, 0, 100), 3);
//			}
//			return input;
//		}


/*
		@Override
		public Mat processFrame(Mat input) {
			// Highest/Lowest Individual Recorded values:
			// W/O Assistance:  Low(21,217,153)     High= HLV(31,236,230)
			// W/ Assistance :  Low(21,217,153)     High= HLV(49,217,230)
			// remove some noise & convert the frame to HSV
			int[] hsvhigh = new int[]{49,255,255};
			int[] hsvlow = new int[]{15,150,150};

			// remove some noise & convert the frame to HSV
			Imgproc.blur(input, blurredImage, new Size(7, 7));

			// convert the frame to HSV
			Imgproc.cvtColor(blurredImage, hsvImage, Imgproc.COLOR_RGB2HSV);

			// get thresholding values from the UI
			// remember: H ranges 0-180, S and V range 0-255
			Scalar minValues = new Scalar(hsvlow[0], hsvlow[1], hsvlow[2]);
			Scalar maxValues = new Scalar(hsvhigh[0], hsvhigh[1], hsvhigh[2]);

			// show the current selected HSV range
			String valuesToPrint = "Hue range: " + minValues.val[0] + "-" + maxValues.val[0] + "\tSaturation range: "
					+ minValues.val[1] + "-" + maxValues.val[1] + "\tValue range: "
					+ minValues.val[2] + "-" + maxValues.val[2];

			// threshold HSV image to select tennis balls
			Core.inRange(hsvImage, minValues, maxValues, mask);

			// morphological operators
			// dilate with large element, erode with small ones
			Mat dilateElement = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(24, 24));
			Mat erodeElement = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(12, 12));

			Imgproc.erode(mask, morphOutput, erodeElement);
			Imgproc.erode(mask, morphOutput, erodeElement);

			Imgproc.dilate(mask, morphOutput, dilateElement);
			Imgproc.dilate(mask, morphOutput, dilateElement);

			// init
			List<MatOfPoint> contours = new ArrayList<>();
			Mat hierarchy = new Mat();

			// find contours
			Mat maskedImage = new Mat();
			Imgproc.findContours(maskedImage, contours, hierarchy, Imgproc.RETR_CCOMP, Imgproc.CHAIN_APPROX_SIMPLE);

			// if any contour exist...
			if (hierarchy.size().height > 0 && hierarchy.size().width > 0)
			{
				// for each contour, display it in blue
				for (int idx = 0; idx >= 0; idx = (int) hierarchy.get(0, idx)[0]) {
					Imgproc.drawContours(input, contours, idx, new Scalar(250, 0, 0));
				}
			}
			return maskedImage;
		}*/

		//		Mat blurredImage = new Mat();
        //		Mat hsvImage = new Mat();
        //		Mat mask = new Mat();
        //		Mat output = new Mat();
        //		Mat hierarchy = new Mat();
        //		Mat maskedImage = new Mat();
        //		Mat morphOutput = new Mat();
        //		Mat dst = new Mat();




// Initialize Stages at Start
			if (dst.empty()) dst.copySize(input.clone());

			// remove some noise & convert the frame to HSV
			Imgproc.blur(input, blurredImage, new Size(7, 7));
			Imgproc.cvtColor(blurredImage, hsvImage, Imgproc.COLOR_BGR2HSV_FULL);


			// show the current selected HSV range
			hsvlog = "Hue range: " + minValues.val[0] + "-" + maxValues.val[0] + "\tSaturation range: "
					+ minValues.val[1] + "-" + maxValues.val[1] + "\tValue range: "
					+ minValues.val[2] + "-" + maxValues.val[2];

			// threshold HSV image to select tennis balls
			Core.inRange(hsvImage, minValues, maxValues, morphOutput);

			// morphological operators
			// dilate with large element, erode with small ones
			// Try using MORPH_ELLIPSE
			Imgproc.erode(morphOutput, morphOutput, erodeElement);
			Imgproc.erode(morphOutput, morphOutput, erodeElement);

			Imgproc.dilate(morphOutput, morphOutput, dilateElement);
			Imgproc.dilate(morphOutput, morphOutput, dilateElement);

			/* reshape to rect
			 *  morphOutput.get(4).copySize(morphOutput.get(3));
			 *  Imgproc.accumulate(morphOutput.get(3), morphOutput.get(4),morphOutput); */

			// init
			List<MatOfPoint> contours = new ArrayList<>();
			dst = new Mat(new Size(input.width(), input.height()),input.type(), new Scalar(0, 0, 0));

			// find contours
			Imgproc.findContours(morphOutput, contours, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);


			// if any contour exist...
			if (hierarchy.size().height > 0 && hierarchy.size().width > 0) {
				// for each contour, display it in blue
				for (int idx = 0; idx >= 0; idx = (int) hierarchy.get(0, idx)[0]) {
					Imgproc.drawContours(dst, contours, idx,
							new Scalar(250, 0, 0), 10);
					// Minimum size allowed for consideration
					contour2f = new MatOfPoint2f(contours.get(idx).toArray());
					//Point[] testArray = contours.get(idx).toArray();

					//Processing on mMOP2f1 which is in type MatOfPoint2f
					approxDistance = Imgproc.arcLength(contour2f, true) * 0.02;
					Imgproc.approxPolyDP(contour2f, approxCurve, approxDistance, true);

					//Convert back to MatOfPoint
					points = new MatOfPoint(approxCurve.toArray());

					// Get bounding rect of contour
					rect = Imgproc.boundingRect(points);
					Imgproc.rectangle(dst, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height), new Scalar(255, 0, 0, 100), 3);
				}
			}
        }